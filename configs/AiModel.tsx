import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY!;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const GenAiCode = model.startChat({
  generationConfig: CodeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'generate to do app:\n`\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   \n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "projectTitle": "Task Manager App",\n  "explanation": "This project is a Task Manager application built with React, styled using Tailwind CSS, and utilizing icons from lucide-react. It allows users to create, manage, and track tasks with features such as adding, editing, deleting, and marking tasks as completed. The application utilizes a component-based architecture with components for task lists, individual tasks, and forms. The goal is to provide a simple and visually appealing interface for task management, adhering to a production-worthy standard.",\n  "files": {\n    "/App.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport TaskList from \'./components/TaskList\';\\nimport TaskForm from \'./components/TaskForm\';\\nimport { Clock } from \'lucide-react\';\\nimport { format } from \'date-fns\';\\n\\nconst App = () => {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem(\'tasks\');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n  const [showForm, setShowForm] = useState(false);\\n  useEffect(() => {\\n    localStorage.setItem(\'tasks\', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (task) => {\\n    setTasks([...tasks, { ...task, id: Date.now(), completed: false }]);\\n    setShowForm(false);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));\\n  };\\n\\n  const editTask = (id, updatedTask) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, ...updatedTask } : task));\\n  };\\n\\n  const handleShowForm = () => {\\n    setShowForm(!showForm)\\n  }\\n\\n  return (\\n    <div className=\\"min-h-screen bg-gray-100 flex flex-col items-center p-4\\">\\n      <header className=\\"w-full max-w-3xl mb-8 flex justify-between items-center\\">\\n          <div className=\\"flex items-center space-x-2\\">\\n            <Clock className=\\"text-gray-500 w-5 h-5\\"/>\\n             <h1 className=\\"text-2xl font-bold text-gray-800\\">Task Manager</h1>\\n          </div>\\n          <p className=\'text-gray-500 text-sm\'>{format(new Date(), \'MMMM dd, yyyy\')}</p>\\n      </header>\\n      <div className=\\"w-full max-w-3xl bg-white rounded-lg shadow-md p-6\\">\\n        <div className=\'flex justify-between items-center mb-4\'>\\n          <h2 className=\\"text-xl font-semibold text-gray-700\\">Tasks</h2>\\n            <button onClick={handleShowForm} className=\'px-3 py-2 rounded text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50\'> {showForm ? \'Hide Form\' : \'Add Task\' }</button>\\n          </div>\\n        {showForm && <TaskForm addTask={addTask} />} \\n        <TaskList tasks={tasks} deleteTask={deleteTask} toggleComplete={toggleComplete} editTask={editTask} />\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default App;"\n    },\n    "/components/TaskList.js": {\n      "code": "import React from \'react\';\\nimport Task from \'./Task\';\\n\\nconst TaskList = ({ tasks, deleteTask, toggleComplete, editTask }) => {\\n    return (\\n        <div>\\n            {tasks.length === 0 ? (\\n                <div className=\'text-gray-500 text-center mt-4\'>No tasks yet. Add a new task!</div>\\n            ) :(\\n            <ul>\\n                {tasks.map((task) => (\\n                    <Task key={task.id} task={task} deleteTask={deleteTask} toggleComplete={toggleComplete} editTask={editTask} />\\n                ))}\\n            </ul>\\n        )}\\n        </div>\\n    );\\n};\\n\\nexport default TaskList;"\n    },\n    "/components/Task.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Trash, Edit, Check, X } from \'lucide-react\';\\n\\nconst Task = ({ task, deleteTask, toggleComplete, editTask }) => {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editedTask, setEditedTask] = useState({ ...task });\\n\\n  const handleEditChange = (e) => {\\n    setEditedTask({ ...editedTask, [e.target.name]: e.target.value });\\n  };\\n\\n  const handleEditSubmit = (e) => {\\n    e.preventDefault();\\n    editTask(task.id, editedTask);\\n    setIsEditing(false);\\n  };\\n\\n  return (\\n    <li className=\\"flex items-center justify-between py-2 border-b border-gray-200\\">\\n      {isEditing ? (\\n        <form onSubmit={handleEditSubmit} className=\\"flex-1 flex items-center space-x-2\\">\\n          <input type=\\"text\\" name=\\"title\\" value={editedTask.title} onChange={handleEditChange} className=\\"flex-1 border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50\\" />\\n          <textarea name=\\"description\\" value={editedTask.description} onChange={handleEditChange} className=\\"flex-1 border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50\\" />\\n          <button type=\\"submit\\" className=\'p-2 rounded-full bg-green-500 hover:bg-green-700 text-white\'> <Check className=\'w-4 h-4\'/> </button>\\n          <button type=\\"button\\" onClick={() => setIsEditing(false)} className=\'p-2 rounded-full bg-red-500 hover:bg-red-700 text-white\'> <X className=\'w-4 h-4\'/></button>\\n        </form>\\n      ) : (\\n        <div className=\\"flex-1 flex items-center space-x-2\\">\\n          <input\\n            type=\\"checkbox\\"\\n            checked={task.completed}\\n            onChange={() => toggleComplete(task.id)}\\n            className=\\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\\"\\n          />\\n           <div className={task.completed ? \'line-through text-gray-500\' : \'text-gray-800\'}>\\n           <h3 className=\'font-semibold\'>{task.title}</h3>\\n            {task.description && <p className=\'text-sm text-gray-600\'>{task.description}</p>}\\n           </div>\\n        </div>\\n      )}\\n      <div className=\'flex items-center space-x-2\'>\\n      {!isEditing && <button onClick={() => setIsEditing(true)} className=\'p-2 rounded-full bg-yellow-500 hover:bg-yellow-700 text-white\'> <Edit className=\'w-4 h-4\'/> </button>}\\n        <button onClick={() => deleteTask(task.id)} className=\'p-2 rounded-full bg-red-500 hover:bg-red-700 text-white\'> <Trash className=\'w-4 h-4\'/> </button>\\n      </div>\\n    </li>\\n  );\\n};\\n\\nexport default Task;"\n    },\n    "/components/TaskForm.js": {\n        "code": "import React, { useState } from \'react\';\\n\\nconst TaskForm = ({ addTask }) => {\\n  const [title, setTitle] = useState(\'\');\\n  const [description, setDescription] = useState(\'\');\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (title.trim()) {\\n      addTask({ title, description });\\n      setTitle(\'\');\\n      setDescription(\'\');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\"flex flex-col space-y-4 mb-4\\">\\n      <input\\n        type=\\"text\\"\\n        placeholder=\\"Task Title\\"        value={title}\\n        onChange={(e) => setTitle(e.target.value)}\\n        className=\\"p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50\\"\\n      />\\n       <textarea\\n        placeholder=\\"Task Description\\"\\n        value={description}\\n        onChange={(e) => setDescription(e.target.value)}\\n        className=\\"p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50\\"\\n      />\\n      <button type=\\"submit\\" className=\\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50\\">Add Task</button>\\n    </form>\\n  );\\n};\\n\\nexport default TaskForm;"\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n    "/components/TaskList.js",\n    "/components/Task.js",\n    "/components/TaskForm.js"\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});
// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
